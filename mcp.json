{
  "$schema": "https://modelcontextprotocol.io/schema/v1.json",
  "name": "Grassroots-PWA Enhanced MCP Server",
  "version": "2.1.0",
  "description": "Enhanced MCP server with command execution, server management, API testing, and advanced logging capabilities with operation tracking and performance monitoring.",
  "tools": [
    {
      "id": "exec",
      "name": "Command Exec Proxy",
      "description": "Run allowed commands via the local MCP server: npm/node/tsc/vitest/prisma/database scripts. Returns JSON with success, exitCode, stdout, stderr.",
      "type": "http",
      "url": "http://localhost:9123/exec",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "command": {
            "type": "string",
            "description": "Shell command to execute (e.g. \"npx tsc src/foo.tsx --noEmit\", \"cd backend && node scripts/check-schema-alignment.js\")."
          }
        },
        "required": ["command"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "exitCode": { "type": "integer" },
          "stdout": { "type": "string" },
          "stderr": { "type": "string" }
        },
        "required": ["success", "exitCode", "stdout", "stderr"],
        "additionalProperties": false
      }
    },
    {
      "id": "startDevServer",
      "name": "Start Development Server",
      "description": "Start a development server (backend/frontend) with enhanced logging and process monitoring.",
      "type": "http",
      "url": "http://localhost:9123/startDevServer",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to start (backend or frontend)"
          },
          "options": {
            "type": "object",
            "properties": {
              "timeout": { "type": "number", "description": "Startup timeout in milliseconds" }
            },
            "additionalProperties": false
          }
        },
        "required": ["project"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "project": { "type": "string" },
          "pid": { "type": "number" },
          "port": { "type": "number" },
          "status": { "type": "string" },
          "message": { "type": "string" },
          "startTime": { "type": "string" },
          "logFile": { "type": "string" },
          "errorLogFile": { "type": "string" }
        },
        "required": ["success"],
        "additionalProperties": true
      }
    },
    {
      "id": "stopDevServer",
      "name": "Stop Development Server",
      "description": "Stop a running development server with graceful shutdown and detailed logging.",
      "type": "http",
      "url": "http://localhost:9123/stopDevServer",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to stop"
          }
        },
        "required": ["project"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "message": { "type": "string" },
          "graceful": { "type": "boolean" },
          "uptime": { "type": "number" }
        },
        "required": ["success"],
        "additionalProperties": true
      }
    },
    {
      "id": "getServerStatus",
      "name": "Get Server Status",
      "description": "Get detailed status information for a managed server including health checks and performance metrics.",
      "type": "http",
      "url": "http://localhost:9123/getServerStatus",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to check status for"
          }
        },
        "required": ["project"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "running": { "type": "boolean" },
          "project": { "type": "string" },
          "pid": { "type": "number" },
          "port": { "type": "number" },
          "status": { "type": "string" },
          "uptime": { "type": "number" },
          "health": { "type": "string" },
          "logFile": { "type": "string" }
        },
        "additionalProperties": true
      }
    },
    {
      "id": "getRecentLogs",
      "name": "Get Recent Logs",
      "description": "Get recent log entries from memory with optional level filtering. Fast access to latest logs.",
      "type": "http",
      "url": "http://localhost:9123/getRecentLogs",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to get logs for"
          },
          "lines": {
            "type": "number",
            "default": 50,
            "description": "Number of recent log lines to retrieve"
          },
          "level": {
            "type": "string",
            "enum": ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"],
            "description": "Filter logs by level (optional)"
          }
        },
        "required": ["project"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "project": { "type": "string" },
          "logs": { "type": "string" },
          "sessionId": { "type": "string" }
        },
        "required": ["success"],
        "additionalProperties": true
      }
    },
    {
      "id": "searchLogs",
      "name": "Search Logs",
      "description": "Search log files using regex patterns. Powerful log analysis and debugging tool.",
      "type": "http",
      "url": "http://localhost:9123/searchLogs",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to search logs for"
          },
          "query": {
            "type": "string",
            "description": "Search query (regex pattern)"
          },
          "options": {
            "type": "object",
            "properties": {
              "limit": { "type": "number", "default": 100 },
              "caseSensitive": { "type": "boolean", "default": false }
            },
            "additionalProperties": false
          }
        },
        "required": ["project", "query"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "query": { "type": "string" },
          "matches": { "type": "array" },
          "totalMatches": { "type": "number" },
          "totalLines": { "type": "number" }
        },
        "required": ["success"],
        "additionalProperties": true
      }
    },
    {
      "id": "getPerformanceMetrics",
      "name": "Get Performance Metrics",
      "description": "Get real-time performance metrics including memory usage, operations in progress, and system stats.",
      "type": "http",
      "url": "http://localhost:9123/getPerformanceMetrics",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to get metrics for"
          }
        },
        "required": ["project"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "project": { "type": "string" },
          "metrics": {
            "type": "object",
            "properties": {
              "operationsInProgress": { "type": "number" },
              "currentOperations": { "type": "array" },
              "memoryUsage": { "type": "object" },
              "uptime": { "type": "number" }
            }
          }
        },
        "required": ["success"],
        "additionalProperties": true
      }
    },
    {
      "id": "listLogFiles",
      "name": "List Log Files",
      "description": "List all available log files with metadata (size, type, creation time).",
      "type": "http",
      "url": "http://localhost:9123/listLogFiles",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "project": {
            "type": "string",
            "enum": ["backend", "frontend"],
            "description": "Project to list log files for (optional)"
          }
        },
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "files": { "type": "array" },
          "directory": { "type": "string" },
          "count": { "type": "number" },
          "totalSize": { "type": "number" }
        },
        "additionalProperties": true
      }
    },
    {
      "id": "testApiEndpoint",
      "name": "Test API Endpoint",
      "description": "Test API endpoints with detailed response analysis and timing.",
      "type": "http",
      "url": "http://localhost:9123/testApiEndpoint",
      "method": "POST",
      "headers": {
        "Content-Type": "application/json"
      },
      "input_schema": {
        "type": "object",
        "properties": {
          "method": { "type": "string", "enum": ["GET", "POST", "PUT", "DELETE", "PATCH"] },
          "url": { "type": "string", "description": "URL to test (localhost only)" },
          "body": { "description": "Request body (for POST/PUT/PATCH)" },
          "headers": { "type": "object", "description": "Additional headers" }
        },
        "required": ["method", "url"],
        "additionalProperties": false
      },
      "output_schema": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "status": { "type": "number" },
          "statusText": { "type": "string" },
          "headers": { "type": "object" },
          "body": {},
          "responseTime": { "type": "number" }
        },
        "additionalProperties": true
      }
    }
  ]
}