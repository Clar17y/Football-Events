/**
 * Core type definitions for the Grassroots Football Logger
 * 
 * This file contains the main entity types used throughout the application.
 * All property names use snake_case for consistency with database schema.
 */

/**
 * Represents a football player (full interface with all fields)
 */
export interface Player {
  /** Unique identifier for the player (maps to players.id UUID) */
  id: string;
  /** Player's full name (maps to players.full_name) */
  full_name: string;
  /** Player's squad number (maps to players.squad_number) */
  squad_number?: number;
  /** Player's preferred position code (maps to players.preferred_pos FK) */
  preferred_pos?: string;
  /** Player's date of birth (maps to players.dob) */
  dob?: string; // ISO date string
  /** Notes about the player (maps to players.notes) */
  notes?: string;
  /** Team ID this player belongs to (maps to players.current_team FK) */
  current_team?: string;
  /** When the player record was created (maps to players.created_at) */
  created_at: string; // ISO timestamp string
  /** When the player record was last updated (maps to players.updated_at) */
  updated_at?: string; // ISO timestamp string (null if never updated)
}

/**
 * Player data for creating a new player (excludes auto-generated fields)
 */
export interface CreatePlayer {
  /** Player's full name */
  full_name: string;
  /** Player's squad number (optional) */
  squad_number?: number;
  /** Player's preferred position code (optional) */
  preferred_pos?: string;
  /** Player's date of birth (optional) */
  dob?: string; // ISO date string
  /** Notes about the player (optional) */
  notes?: string;
  /** Team ID this player belongs to (optional) */
  current_team?: string;
  // Excluded: id, created_at, updated_at (auto-generated by database)
}

/**
 * Player data for updating an existing player (all fields optional)
 */
export interface UpdatePlayer {
  /** Player's full name */
  full_name?: string;
  /** Player's squad number */
  squad_number?: number;
  /** Player's preferred position code */
  preferred_pos?: string;
  /** Player's date of birth */
  dob?: string; // ISO date string
  /** Notes about the player */
  notes?: string;
  /** Team ID this player belongs to */
  current_team?: string;
  // Excluded: id (immutable), created_at, updated_at (auto-managed by database)
}

/**
 * Football position codes (matches database positions table)
 */
export type PlayerPositionCode = 
  | 'GK'   // Goalkeeper
  | 'CB'   // Centre Back
  | 'LB'   // Left Back
  | 'RB'   // Right Back
  | 'LWB'  // Left Wing Back
  | 'RWB'  // Right Wing Back
  | 'CDM'  // Defensive Midfielder
  | 'CM'   // Central Midfielder
  | 'CAM'  // Attacking Midfielder
  | 'LM'   // Left Midfielder
  | 'RM'   // Right Midfielder
  | 'LW'   // Left Winger
  | 'RW'   // Right Winger
  | 'CF'   // Centre Forward
  | 'ST'   // Striker
  | 'LF'   // Left Forward
  | 'RF';  // Right Forward

/**
 * Football position with full details (matches database positions table)
 */
export interface PlayerPosition {
  /** Position code (maps to positions.pos_code) */
  pos_code: PlayerPositionCode;
  /** Full position name (maps to positions.long_name) */
  long_name: string;
  /** When the position was created */
  created_at: string;
  /** When the position was last updated */
  updated_at?: string;
}

/**
 * Match clock state
 */
export interface MatchClock {
  /** Whether the clock is currently running */
  running: boolean;
  /** Wall-clock timestamp when the current period started */
  start_ts: number | null;
  /** Total paused time in milliseconds */
  offset_ms: number;
  /** Current period number */
  current_period: number;
  /** Period start times for tracking */
  period_starts: Record<number, number>;
}

/**
 * Represents a football team (full interface with all fields)
 */
export interface Team {
  /** Unique identifier for the team (maps to teams.id UUID) */
  id: string;
  /** Team name (maps to teams.name) */
  name: string;
  /** Home kit colors */
  homeKit?: {
    /** Primary home kit color (maps to teams.home_kit_primary hex) */
    primary: string;
    /** Secondary home kit color (maps to teams.home_kit_secondary hex) */
    secondary: string;
  };
  /** Away kit colors */
  awayKit?: {
    /** Primary away kit color (maps to teams.away_kit_primary hex) */
    primary: string;
    /** Secondary away kit color (maps to teams.away_kit_secondary hex) */
    secondary: string;
  };
  /** Team logo URL (maps to teams.logo_url) */
  logoUrl?: string;
  /** Team formation (e.g., "4-4-2") - frontend only field */
  formation?: string;
  /** When the team record was created (maps to teams.created_at) */
  created_at: string; // ISO timestamp string
  /** When the team record was last updated (maps to teams.updated_at) */
  updated_at?: string; // ISO timestamp string (null if never updated)
  // Removed: players: Player[] - fetch separately via getPlayers(teamId)
}

/**
 * Team data for creating a new team (excludes auto-generated fields)
 */
export interface CreateTeam {
  /** Team name */
  name: string;
  /** Home kit colors (optional) */
  homeKit?: {
    /** Primary home kit color (hex code) */
    primary: string;
    /** Secondary home kit color (hex code) */
    secondary: string;
  };
  /** Away kit colors (optional) */
  awayKit?: {
    /** Primary away kit color (hex code) */
    primary: string;
    /** Secondary away kit color (hex code) */
    secondary: string;
  };
  /** Team logo URL (optional) */
  logoUrl?: string;
  /** Team formation (optional, frontend only field) */
  formation?: string;
  // Excluded: id, created_at, updated_at (auto-generated by database)
}

/**
 * Team data for updating an existing team (all fields optional)
 */
export interface UpdateTeam {
  /** Team name */
  name?: string;
  /** Home kit colors */
  homeKit?: {
    /** Primary home kit color (hex code) */
    primary: string;
    /** Secondary home kit color (hex code) */
    secondary: string;
  };
  /** Away kit colors */
  awayKit?: {
    /** Primary away kit color (hex code) */
    primary: string;
    /** Secondary away kit color (hex code) */
    secondary: string;
  };
  /** Team logo URL */
  logoUrl?: string;
  /** Team formation (frontend only field) */
  formation?: string;
  // Excluded: id (immutable), created_at, updated_at (auto-managed by database)
}

/**
 * Represents a football match
 */
export interface Match {
  /** Unique identifier for the match */
  id: string;
  /** Season this match belongs to */
  season_id: string;
  /** Home team */
  home_team: Team;
  /** Away team */
  away_team: Team;
  /** Match date and time */
  date: number; // Unix timestamp
  /** Current match status */
  status: MatchStatus;
  /** Match settings and configuration */
  settings: MatchSettings;
  /** Current period (1 = first half, 2 = second half, etc.) */
  current_period: number;
  /** Match clock state */
  clock: MatchClock;
  /** Match result (if completed) */
  result?: MatchResult;
}

/**
 * Match status enumeration
 */
export type MatchStatus = 
  | 'not_started'
  | 'in_progress'
  | 'half_time'
  | 'extra_time'
  | 'penalty_shootout'
  | 'completed'
  | 'abandoned'
  | 'postponed';

/**
 * Match settings and configuration
 */
export interface MatchSettings {
  /** Match duration per period in minutes */
  period_duration: number;
  /** Number of periods (usually 2 for halves) */
  total_periods: number;
  /** Half-time duration in minutes */
  half_time_duration: number;
  /** Whether extra time is allowed */
  allow_extra_time: boolean;
  /** Extra time duration per period in minutes */
  extra_time_duration: number;
  /** Whether penalty shootout is allowed */
  allow_penalty_shootout: boolean;
  /** Maximum number of substitutions allowed per team */
  max_substitutions: number;
  /** Whether to track injury time */
  track_injury_time: boolean;
}

/**
 * Match result
 */
export interface MatchResult {
  /** Home team score */
  home_score: number;
  /** Away team score */
  away_score: number;
  /** Whether the match went to extra time */
  extra_time: boolean;
  /** Whether the match went to penalty shootout */
  penalty_shootout: boolean;
  /** Penalty shootout result (if applicable) */
  penalty_result?: {
    home_penalties: number;
    away_penalties: number;
  };
}

/**
 * Sentiment rating scale
 */
export interface SentimentOption {
  value: number;
  label: string;
}

/**
 * Default sentiment options
 */
export const SENTIMENT_OPTIONS: SentimentOption[] = [
  { value: 4,  label: 'Outstanding' },
  { value: 3,  label: 'Excellent' },
  { value: 2,  label: 'Good' },
  { value: 1,  label: 'Solid' },
  { value: 0,  label: 'Neutral' },
  { value: -1, label: 'Below par' },
  { value: -2, label: 'Poor' },
  { value: -3, label: 'Bad' },
  { value: -4, label: 'Terrible' },
];

/**
 * Common utility types
 */
export type ID = string;
export type Timestamp = number;
export type Optional<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;